AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates all required security groups
Parameters:
  Environment:
    Type: String
    Description: Environment Name (DEV)
    AllowedValues: [ 'DEV' ]
  Platform:
    Type: String
    Default: 'AM'
    Description: Platform Name
  VpcStackName:
    Type: String
    Description: Name of the stack which is used to create VPC and Subnets
Resources:
  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: Allow IPV4 HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: '::/0'
          Description: Allow IPV6 HTTP
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${Platform}-ALB-SG-01'

  # A security group for the gateway service containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  GatewayContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for the gateway service containers
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8081
          SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
          Description: Ingress from the public ALB
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${Platform}-GW-CONTAINER-SG-02'
  GwContainerSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'GatewayContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'GatewayContainerSecurityGroup'

  # A security group for the color service containers.
  ColorContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for the color service containers
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref 'GatewayContainerSecurityGroup'
          Description: Ingress from gateway container
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${Platform}-COLOR-CONTAINER-SG-02'
  ColorContainerSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'ColorContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref 'ColorContainerSecurityGroup'
Outputs:
  PublicLoadBalancerSG:
    Description: Public Load Balancer Security Group Id
    Value: !Ref 'PublicLoadBalancerSG'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicAlbSecurityGroupId' ] ]
  GatewayContainerSecurityGroup:
    Description: Gateway Container Security Group Id
    Value: !Ref 'GatewayContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'GatewayContainerSecurityGroupId' ] ]
  ColorContainerSecurityGroup:
    Description: Color Container Security Group Id
    Value: !Ref 'ColorContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ColorContainerSecurityGroupId' ] ]
